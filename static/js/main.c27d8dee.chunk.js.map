{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["registerLocale","enGB","isoLink","href","App","index","x","useState","Date","date","setDate","weeknumber","year","week","day","dayName","toLocaleString","weekday","toString","slice","yearBig","yearLittle","plus","getFixVersionAndPlus","fixVersion","className","style","fontSize","ordinal","dateFormat","todayButton","locale","inline","showMonthDropdown","showYearDropdown","dropdownMode","selected","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAOAA,yBAAe,QAASC,KAExB,IAkBMC,EAAU,mBAAGC,KAAK,yCAAR,sBAsEDC,EApEH,WACV,IArBeC,EAAeC,EAqB9B,EAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BC,IAA0BF,GAA9CG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,IACdC,EAAUN,EAAKO,eAAe,QAAS,CAAEC,QAAS,SACxD,GAxBeZ,EAwBuB,EAxBgB,EAAxBC,EAwBWM,EAAKM,YAvB5CC,MAAM,EAAGd,GACXC,EAAEa,MAAMd,KAsBR,mBAAOe,EAAP,KAAgBC,EAAhB,KACA,EApB2B,SAC3BA,EACAR,EACAC,GAEA,GAAY,IAARA,EACF,MAAO,CAAC,GAAD,OAAIO,EAAJ,YAAkBR,EAAO,EAAzB,eAAiCQ,EAAjC,YAA+CR,EAAO,GAAtD,UAEP,IAAMS,EAAOR,EAAM,EAAI,EAAI,EAC3B,MAAO,CAAC,GAAD,OAAIO,EAAJ,YAAkBR,EAAOS,GAAzB,UAAoCA,IAWlBC,CAAqBF,EAAYR,EAAMC,GAAlE,mBAAOU,EAAP,KAAmBF,EAAnB,KAGA,OACE,sBAAKG,UAAU,MAAf,UACE,iCACE,yDAEF,iCACE,+BACE,wBAAQC,MAAO,CAAEC,SAAU,QAA3B,SAAsCH,MAExC,oCACE,iDACA,6CACeJ,EACb,+BAAOC,IAFT,aAGY,iCAAOO,IAAQf,GAAf,WAHZ,6BAI6BX,EAJ7B,YAI8C,+BAAOa,IAAgB,IAC1D,IAARD,EAjBT,yGAiBuC,GALjC,qBAKuD,IACrD,+BAAOQ,IANT,qCAMwD,IACtD,+BAAOE,IAPT,UANJ,KAiBE,oCACE,oDACA,cAAC,IAAD,CACEK,WAAW,aACXC,YAAY,SACZC,OAAO,QACPC,QAAM,EACNC,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,SACbC,SAAU3B,EACV4B,SAAU,SAACC,GACLA,GAAO5B,EAAQ4B,YAK3B,iCACE,+BACE,uEACwCpC,EADxC,2EAIA,+BACE,8DADF,8DAIA,2FACA,0CACU,mBAAGC,KAAK,uCAAR,uBAA6D,IADvE,yEC3EUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDuI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c27d8dee.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport * as weeknumber from \"weeknumber\";\r\nimport ordinal from \"ordinal\";\r\nimport enGB from \"date-fns/locale/en-GB\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nregisterLocale(\"en-GB\", enGB);\r\n\r\nconst splitAt = (index: number, x: string): string[] => [\r\n  x.slice(0, index),\r\n  x.slice(index),\r\n];\r\n\r\nconst getFixVersionAndPlus = (\r\n  yearLittle: string,\r\n  week: number,\r\n  day: number\r\n): [string, string] => {\r\n  if (day === 4) {\r\n    return [`${yearLittle}.${week + 1} or ${yearLittle}.${week + 2}`, `1 or 2`];\r\n  } else {\r\n    const plus = day > 4 ? 2 : 1;\r\n    return [`${yearLittle}.${week + plus}`, `${plus}`];\r\n  }\r\n};\r\n\r\nconst isoLink = <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>;\r\n\r\nconst App = () => {\r\n  const [date, setDate] = useState(new Date());\r\n  const { year, week, day } = weeknumber.weekNumberYear(date);\r\n  const dayName = date.toLocaleString(\"en-US\", { weekday: \"long\" });\r\n  const [yearBig, yearLittle] = splitAt(2, year.toString());\r\n  const [fixVersion, plus] = getFixVersionAndPlus(yearLittle, week, day);\r\n  const thursdayExplain =\r\n    \"(Thursdays are tricky, there is release to staging on Thursday, check if the release was done already)\";\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>What The Fix Version?</h1>\r\n      </header>\r\n      <main>\r\n        <span>\r\n          <strong style={{ fontSize: \"800%\" }}>{fixVersion}</strong>\r\n        </span>\r\n        <details>\r\n          <summary>Explain...</summary>\r\n          <p>\r\n            The year is {yearBig}\r\n            <mark>{yearLittle}</mark>\r\n            and it is <mark>{ordinal(week)} week</mark>\r\n            of the year (according to {isoLink}). It is <mark>{dayName}</mark>{\" \"}\r\n            {day === 4 ? thursdayExplain : \"\"} so we need to add{\" \"}\r\n            <mark>{plus}</mark> to the week number. Hence we have{\" \"}\r\n            <mark>{fixVersion}</mark>.\r\n          </p>\r\n        </details>\r\n        or\r\n        <details>\r\n          <summary>Chage date...</summary>\r\n          <DatePicker\r\n            dateFormat=\"yyyy-MM-dd\"\r\n            todayButton=\"Today!\"\r\n            locale=\"en-GB\"\r\n            inline\r\n            showMonthDropdown\r\n            showYearDropdown\r\n            dropdownMode=\"select\"\r\n            selected={date}\r\n            onChange={(value) => {\r\n              if (value) setDate(value);\r\n            }}\r\n          />\r\n        </details>\r\n      </main>\r\n      <footer>\r\n        <ul>\r\n          <li>\r\n            TBH I don't know if fix version uses {isoLink} week numbering, it\r\n            might be pure coincidence that it works for 2020.\r\n          </li>\r\n          <li>\r\n            <del>It might not work correctly</del>\r\n            It definitely works incorrectly around turn of the year.\r\n          </li>\r\n          <li>There is no reason for this to be React app... but it is.</li>\r\n          <li>\r\n            It uses <a href=\"https://kognise.github.io/water.css/\">Water.css</a>{\" \"}\r\n            (bundled cause official CDN was serving some old version).\r\n          </li>\r\n        </ul>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}