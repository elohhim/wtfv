{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["registerLocale","enGB","App","index","x","useState","Date","date","setDate","weeknumber","year","week","day","dayName","toLocaleString","weekday","plus","toString","slice","yearBig","yearLittle","fixVersion","className","style","fontSize","ordinal","href","dateFormat","todayButton","locale","inline","showMonthDropdown","showYearDropdown","dropdownMode","selected","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAOAA,yBAAe,QAASC,KAExB,IA2DeC,EAzDH,WAAO,IAFFC,EAAeC,EAEd,EACQC,mBAAS,IAAIC,MADrB,mBACTC,EADS,KACHC,EADG,OAEUC,IAA0BF,GAA7CG,EAFS,EAETA,KAAMC,EAFG,EAEHA,KAAMC,EAFH,EAEGA,IACbC,EAAUN,EAAKO,eAAe,QAAS,CAACC,QAAS,SACjDC,EAAOJ,EAAM,EAAI,EAAI,EAJX,GAFDT,EAOuB,EAPgB,EAAxBC,EAOWM,EAAKO,YAPWC,MAAM,EAAGf,GAAQC,EAAEc,MAAMf,KAElE,mBAKTgB,EALS,KAKAC,EALA,KAMVC,EAAU,UAAMD,EAAN,YAAoBT,EAAOK,GAE3C,OACI,yBAAKM,UAAU,OACb,gCACE,sDAEF,8BACE,8BAAM,4BAAQC,MAAO,CAACC,SAAU,SAAUH,IAC1C,iCACE,+CACA,0CACeF,EACb,8BAAOC,GAFT,aAGY,8BAAOK,IAAQd,GAAf,SAHZ,6BAI4B,uBAAGe,KAAK,0CAAR,YAJ5B,YAKQ,8BAAOb,GALf,sBAKiD,8BAAOG,GALxD,sCAMgB,8BAAOK,GANvB,MAJJ,KAcE,iCACE,kDACA,kBAAC,IAAD,CAAYM,WAAW,aACXC,YAAY,SACZC,OAAO,QACPC,QAAM,EACNC,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,SACbC,SAAU3B,EACV4B,SAAU,SAAAC,GACJA,GAAO5B,EAAQ4B,QAIrC,gCACE,4BACE,mJACA,oFACA,yFACA,uCAAY,uBAAGV,KAAK,wCAAR,aAAZ,mEC9CQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6c2332ac.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport DatePicker, {registerLocale} from 'react-datepicker';\nimport * as weeknumber from 'weeknumber';\nimport ordinal from 'ordinal';\nimport enGB from 'date-fns/locale/en-GB';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nregisterLocale('en-GB', enGB);\n\nconst splitAt = (index: number, x: string): string[] => [x.slice(0, index), x.slice(index)];\n\nconst App = () => {\n  const [date, setDate] = useState(new Date());\n  const {year, week, day} = weeknumber.weekNumberYear(date);\n  const dayName = date.toLocaleString('en-US', {weekday: 'long'});\n  const plus = day > 4 ? 2 : 1;\n  const [yearBig, yearLittle] = splitAt(2, year.toString());\n  const fixVersion = `${yearLittle}.${week + plus}`;\n\n  return (\n      <div className=\"App\">\n        <header>\n          <h1>What The Fix Version?</h1>\n        </header>\n        <main>\n          <span><strong style={{fontSize: '800%'}}>{fixVersion}</strong></span>\n          <details>\n            <summary>Explain...</summary>\n            <p>\n              The year is {yearBig}\n              <mark>{yearLittle}</mark>\n              and it is <mark>{ordinal(week)} week</mark>\n              of the year (according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>).\n              It is <mark>{dayName}</mark> so we need to add <mark>{plus}</mark> to the week number.\n              Hence we have <mark>{fixVersion}</mark>.\n            </p>\n          </details>\n          or\n          <details>\n            <summary>Chage date...</summary>\n            <DatePicker dateFormat=\"yyyy-MM-dd\"\n                        todayButton=\"Today!\"\n                        locale=\"en-GB\"\n                        inline\n                        showMonthDropdown\n                        showYearDropdown\n                        dropdownMode=\"select\"\n                        selected={date}\n                        onChange={value => {\n                          if (value) setDate(value)\n                        }}/>\n          </details>\n        </main>\n        <footer>\n          <ul>\n            <li>TBH I don't know if fix version uses ISO 8601 week numbering, it might be pure coincidence that it works for 2020w.</li>\n            <li>It might not work correctly around turn of the year.</li>\n            <li>There is no reason for this to be React app... but it is.</li>\n            <li>It uses <a href=\"https://kognise.github.io/water.css/\">Water.css</a> (bundled cause official CDN was\n              serving some old version).\n            </li>\n          </ul>\n\n        </footer>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}