{"version":3,"sources":["skipped.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["skipped","version","reason","registerLocale","enGB","ThemeContext","createContext","getSkipReason","find","it","getFixVersionData","yearLittle","week","plus","fixVersion","skipReason","FixVersion","props","Consumer","theme","content","followCursor","plugins","style","textDecoration","FixVersions","fixVersions","map","index","array","length","isoLink","href","App","x","darkSchemeQuery","window","matchMedia","getTheme","mq","matches","useState","setIsDarkTheme","useEffect","mqListener","e","addEventListener","removeEventListener","useThemeDetector","Date","date","setDate","weeknumber","year","day","dayName","toLocaleString","weekday","toString","slice","yearBig","plusOne","plusTwo","getFixVersionsData","join","Provider","value","className","fontSize","ordinal","dateFormat","todayButton","locale","inline","showMonthDropdown","showYearDropdown","dropdownMode","selected","onChange","repo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c81286e3.chunk.js","sourcesContent":["// curated list of skipped releases - primitive but effective\nexport const skipped: { version: string; reason: string }[] = [\n  {\n    version: \"22.22\",\n    reason: \"Memorial Day Weekend\",\n  },\n  {\n    version: \"22.27\",\n    reason: \"July 4th Weekend\",\n  },\n  {\n    version: \"22.36\",\n    reason: \"¯\\\\_(ツ)_/¯\",\n  },\n];\n","import Tippy from \"@tippyjs/react\";\nimport { followCursor } from \"tippy.js\";\nimport enGB from \"date-fns/locale/en-GB\";\nimport ForkMeOnGithub from \"fork-me-on-github\";\nimport ordinal from \"ordinal\";\nimport { createContext, useEffect, useState } from \"react\";\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport * as weeknumber from \"weeknumber\";\nimport { skipped } from \"./skipped\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"tippy.js/dist/tippy.css\";\nimport \"tippy.js/themes/light.css\";\n\nregisterLocale(\"en-GB\", enGB);\n\ntype Theme = \"light\" | \"dark\";\n\nconst ThemeContext: React.Context<Theme> = createContext<Theme>(\"light\");\n\nconst useThemeDetector = () => {\n  const darkSchemeQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const getTheme = (mq: MediaQueryList | MediaQueryListEvent): Theme =>\n    mq.matches ? \"dark\" : \"light\";\n  const [theme, setIsDarkTheme] = useState(getTheme(darkSchemeQuery));\n  useEffect(() => {\n    const mqListener = (e: MediaQueryListEvent) => {\n      setIsDarkTheme(getTheme(e));\n    };\n    darkSchemeQuery.addEventListener(\"change\", mqListener);\n    return () => darkSchemeQuery.removeEventListener(\"change\", mqListener);\n  }, [darkSchemeQuery]);\n  return theme;\n};\n\ntype FixVersionData = { fixVersion: string; plus: number; skipReason?: string };\n\nconst getSkipReason = (version: string): string | undefined => {\n  return skipped.find((it) => it.version === version)?.reason;\n};\n\nconst getFixVersionData = (\n  yearLittle: string,\n  week: number,\n  plus: number\n): FixVersionData => {\n  const fixVersion = `${yearLittle}.${week + plus}`;\n  return {\n    fixVersion,\n    plus,\n    skipReason: getSkipReason(fixVersion),\n  };\n};\n\nconst getFixVersionsData = (\n  yearLittle: string,\n  week: number,\n  day: number\n): FixVersionData[] => {\n  const plusOne = getFixVersionData(yearLittle, week, 1);\n  const plusTwo = getFixVersionData(yearLittle, week, 2);\n  if (day === 4) {\n    return [plusOne, plusTwo];\n  } else {\n    return [day > 4 ? plusTwo : plusOne];\n  }\n};\n\nconst FixVersion = (props: FixVersionData) => {\n  return props.skipReason ? (\n    <ThemeContext.Consumer>\n      {(theme) => (\n        <Tippy\n          content={`Skipped: ${props.skipReason}`}\n          theme={theme}\n          followCursor\n          plugins={[followCursor]}\n        >\n          <span>\n            <span style={{ textDecoration: \"line-through\" }}>\n              {props.fixVersion}\n            </span>\n            *\n          </span>\n        </Tippy>\n      )}\n    </ThemeContext.Consumer>\n  ) : (\n    <>{props.fixVersion}</>\n  );\n};\n\nconst FixVersions = ({ fixVersions }: { fixVersions: FixVersionData[] }) => {\n  return (\n    <>\n      {fixVersions.map((fixVersion, index, array) => {\n        const last = index === array.length - 1;\n        return last ? (\n          <FixVersion {...fixVersion}></FixVersion>\n        ) : (\n          <>\n            <FixVersion {...fixVersion}></FixVersion> or{\" \"}\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nconst splitAt = (index: number, x: string): string[] => [\n  x.slice(0, index),\n  x.slice(index),\n];\n\nconst isoLink = <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>;\n\nconst App = () => {\n  const theme = useThemeDetector();\n  const [date, setDate] = useState(new Date());\n  const { year, week, day } = weeknumber.weekNumberYear(date);\n  const dayName = date.toLocaleString(\"en-US\", { weekday: \"long\" });\n  const [yearBig, yearLittle] = splitAt(2, year.toString());\n  const fixVersions = getFixVersionsData(yearLittle, week, day);\n  const plus = fixVersions.map(({ plus }) => plus).join(\" or \");\n  const thursdayExplain =\n    \"(Thursdays are tricky, there is release to staging on Thursday, check if the release was done already)\";\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div className=\"App\">\n        <header>\n          <h1>What The Fix Version?</h1>\n        </header>\n        <main>\n          <span>\n            <strong style={{ fontSize: \"800%\" }}>\n              <FixVersions fixVersions={fixVersions}></FixVersions>\n            </strong>\n          </span>\n          <details>\n            <summary>Explain...</summary>\n            <p>\n              The year is {yearBig}\n              <mark>{yearLittle}</mark> and it is{\" \"}\n              <mark>{ordinal(week)} week</mark> of the year (according to{\" \"}\n              {isoLink}). It is <mark>{dayName}</mark>{\" \"}\n              {day === 4 ? thursdayExplain : \"\"} so we need to add{\" \"}\n              <mark>{plus}</mark> to the week number. Hence we have{\" \"}\n              <mark>\n                <FixVersions fixVersions={fixVersions}></FixVersions>\n              </mark>\n              .\n            </p>\n          </details>\n          or\n          <details>\n            <summary>Chage date...</summary>\n            <DatePicker\n              dateFormat=\"yyyy-MM-dd\"\n              todayButton=\"Today!\"\n              locale=\"en-GB\"\n              inline\n              showMonthDropdown\n              showYearDropdown\n              dropdownMode=\"select\"\n              selected={date}\n              onChange={(value) => {\n                if (value) setDate(value);\n              }}\n            />\n          </details>\n        </main>\n        <footer>\n          <ul>\n            <li>\n              TBH I don't know if fix version uses {isoLink} week numbering, it\n              might be pure coincidence that it worked for 2020-22 so far.\n            </li>\n            <li>\n              <del>It might not work correctly</del>\n              It definitely works incorrectly around turn of the year.\n            </li>\n            <li>\n              There is no reason for this to be React (Preact in fact) app...\n              but it is.\n            </li>\n            <li>\n              It uses{\" \"}\n              <a href=\"https://kognise.github.io/water.css/\">Water.css</a>.\n            </li>\n          </ul>\n        </footer>\n\n        <ForkMeOnGithub\n          className=\"fork-me-on-github\"\n          repo=\"https://github.com/elohhim/wtfv\"\n        />\n        <style>{`.fork-me-on-github > svg {\n        fill: var(--background) !important;\n        color: var(--text-main) !important;\n        }`}</style>\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}